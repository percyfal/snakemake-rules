# -*- snakemake -*-
include: "gatk.settings"
include: "../pybedtools/pybedtools_make_bed_targets.rule"
include: "../htslib/htslib_bgzip.rule"
include: "../samtools/samtools_tabix_vcf.rule"

config_default = {'gatk' :{'combine_gvcfs_targets': _gatk_config_rule_default.copy()}}

update_config(config_default, config)
config = config_default

cmd = re.sub("-Xmx[0-9a-zA-Z]+", "-Xmx{mem}".format(mem=config['gatk']['java_mem']), config['gatk']['cmd'])


rule gatk_combine_gvcfs_targets:
    """Combine gvcf target variants using CombineVariants.

    Combines variant files that result from partitioned variant
    calling. Typically, subregions are generated by the
    pybedtools_make_bed_targets rule from a bed file with all target
    regions. The application wildcard is the application used. The
    partition wildcard is an integer that simply labels each single
    subregion bed file. 

    The output file is tagged with ".combined.vcf.gz".

    As an example, the output all.application.combined.g.vcf.gz will
    be generated from files all.application.1.g.vcf.gz,
    all.application.2.g.vcf.gz etc.

    """
    wildcard_constraints:
        application = "(freebayes|bcftools|haplotype_caller)"
    params:  cmd = cmd + " -T " + COMBINE_GVCFS,
             options = " ".join(["-R", config['gatk']['ref'],
                                 config['gatk']['combine_gvcfs_targets']['options']]),
             runtime = config['gatk']['combine_gvcfs_targets']['runtime']
    input: vcf = ["{{prefix}}.{{application}}.{partition}.g.vcf.gz".format(partition=p+1) for p in range(config['pybedtools']['make_bed_targets']['partitions'])],
           tbi = ["{{prefix}}.{{application}}.{partition}.g.vcf.gz.tbi".format(partition=p+1) for p in range(config['pybedtools']['make_bed_targets']['partitions'])]
    output: vcf = "{prefix}.{application}.combined.g.vcf.gz"
    threads: config['gatk']['combine_gvcfs_targets']['threads']
    shell:  "command=\"{params.cmd} {params.options} $(echo {input.vcf} | sed -e 's/[^ ][^ ]*/-V &/g') -o {output.vcf}\"; eval \"${{command}}\""
